#!/bin/bash

__has() {
  command -v "$1" >/dev/null 2>&1
}

if __has bat || __has batcat; then
  # FIXME: Allow for batcat too
  # let's try this basic --help colorization to make it easier to skim
  bathelp() {
      "$@" --help 2>&1 | bat --style=plain --language=help
  }

  # FIXME: Maybe check `delta`
  batdiff() {
      git diff --name-only --relative --diff-filter=d | xargs bat --diff
  }
fi

if __has fzf; then
  git-fbranches() {
    output="$(git rev-parse --abbrev-ref HEAD; # current branch name
      { git branch | grep -v '\*' | cut -c 3-; } # other branches
    )"
    ret="$?"
    if [ "$ret" -ne 0 ]; then
      printf "%s" "$output"
      return "$ret"
    fi
    printf "%s" "$output" | fzf --preview="git log --decorate --stat {} --color=always --"
  }

  # test setting up fzf on bash (maybe add the zsh one too)
  if [ -n "$BASH_VERSION" ]; then
    eval "$(fzf --bash)"
  elif [ -n "$ZSH_VERSION" ]; then
    eval "$(fzf --zsh)"
  else
    echo "fzf completion will not work until you source the functions"
  fi

  # override _fzf_compgen_{path,dir} if fd is available as it's much faster than find (default)
  # taken from README.md
  # TODO: Maybe add CDPATH, $(dirs), etc, to the search?
  _fzf_compgen_path() {
    fd --hidden --follow --exclude ".git" . "$1"
  }
  _fzf_compgen_dir() {
    fd --type d --hidden --follow --exclude ".git" . "$1"
  }

  __setup_bash_fzf() {
    # do these commands in a function so we don't leak definitions, just the vars we exported
    max_lines=300

    ## cross-platform finding of commands to do some things
    # bat: remove most things from style. filename is already displayed, rule and
    # snip make no sense. Also limit the line range
    bat_opts="-n --color=always --style=changes,header-filesize --line-range=:300"
    if __has batcat; then
      # if we have a `batcat`, it's very likely that it's the program we want, so prefer that to plain `bat`, just in case
      cmd_cat="batcat $bat_opts {}"
    elif __has bat; then
      cmd_cat="bat $bat_opts {}"
    else
      # assume `cat` is always available
      cmd_cat="cat -n {}"
    fi

    cmd_tree="echo no preview command available for tree listing"
    if __has eza; then
      cmd_tree="eza --color=always --tree --group-directories-first --classify --icons {}"
    elif __has tree; then
      cmd_tree="tree -C {}"
    elif __has tree.com && __has rg; then
      # cowboy windows command seems to work ok
      # rg is there for removing "empty" lines of text where we only have pipes and spaces
      # FIXME: Maybe change to be a grep (or rg if available, of course) command?
      cmd_tree="MSYS_NO_PATHCONV=1 tree.com /a /f {} | rg -v \"^(\\s*\\|)+\\s*\$\" | tail -n +3"
    elif __has fd; then
      # not a proper tree, just listing of files and directories
      cmd_tree="fd {}"
    elif __has find; then
      # not a proper tree, just listing of files and directories
      cmd_tree="find {}"
    fi

    if __has pbcopy; then
      cmd_copy="pbcopy"
    elif __has clip.exe; then
      cmd_copy="clip.exe"
    elif __has xclip; then
      # from https://superuser.com/questions/288320/whats-like-osxs-pbcopy-for-linux/288333#288333
      # assume the command works if it's been found
      cmd_copy="xclip -selection clipboard"
    elif __has xsel; then
      # assume the command works if it's been found
      # from https://superuser.com/questions/288320/whats-like-osxs-pbcopy-for-linux/288333#288333
      cmd_copy="xsel --clipboard --input"
    fi

    # always put these first so each command can override them
    common_args=(
      --walker-skip .git,node_modules,target
      --bind ctrl-e:accept
      --bind ctrl-k:cancel
      --bind 'ctrl-/:change-preview-window(down|hidden|)' \
    )
    if [ ! -z "$cmd_copy" ]; then
      common_args+=(--bind "ctrl-y:execute-silent(echo -n {2..} | $cmd_copy)")
    fi

    export FZF_CTRL_T_OPTS="${common_args[@]@Q}"" \
      --preview "'$cmd_cat || { $cmd_tree | head -n $max_lines; }'" \
      "

    # use a special c-/ binding so we don't have three modes, and the preview here is not as useful
    export FZF_CTRL_R_OPTS="${common_args[@]@Q}"" \
      --bind 'ctrl-/:toggle-preview' \
      --preview 'echo {}' --preview-window up:3:hidden:wrap \
      "
      # --color header:italic \
      # --header 'Press CTRL-Y to copy command into clipboard' \

    # Print tree structure in the preview window
    export FZF_ALT_C_OPTS="${common_args[@]@Q}"" \
      --preview "'$cmd_tree'" \
      "

    # Advanced customization of fzf options via _fzf_comprun function
    # - The first argument to the function is the name of the command.
    # - You should make sure to pass the rest of the arguments to fzf.
    # this is the command we run when expanding the ** token
    _fzf_comprun() {
      local command=$1
      shift

      preview_args=()
      case "$command" in
        cd)
          command -v tree >/dev/null 2>&1 && preview_args=(--preview "$cmd_tree | head -n $max_lines")
          ;;
        export|unset)
          preview_args=(--preview "eval 'echo \$'{}")
          ;;
        ssh)
          command -v dig >/dev/null 2>&1 && preview_args=(--preview "dig {}")
          ;;
        *)
          preview_args=(--preview '[ -d {} ] && { '"$cmd_tree"' | head -n '"$max_lines"'; } || '"$cmd_cat"' 2>/dev/null')
          ;;
      esac

      fzf "${common_args[@]}" "${preview_args[@]}" "$@"
    }
  }
  __setup_bash_fzf
  unset __setup_bash_fzf

  # for ssh, complete without needing the '**' token
  # unsure I want this, as it'll do the completion anywhere in the line, not just where a host is expected
  # _fzf_complete_ssh_notrigger() {
  #   FZF_COMPLETION_TRIGGER='' _fzf_host_completion
  # }
  # complete -o bashdefault -o default -F _fzf_complete_ssh_notrigger ssh

  # # this seems super slow on Windows, spawns tons of bash instances...
  # # also added https://github.com/lincheney/fzf-tab-completion
  # # setup some variables to behaviours I like more
  # FZF_COMPLETION_AUTO_COMMON_PREFIX=true
  # FZF_COMPLETION_AUTO_COMMON_PREFIX_PART=true
  # # now bind it if it's available
  # if hash fzf_bash_completion 2>/dev/null; then
  #   bind -x '"\t": fzf_bash_completion'
  # fi
fi

