#!/usr/bin/env python3

from pathlib import Path

import re
import shutil
import subprocess
import sys


def detect_package_manager():
  if Path("/etc/debian_version").is_file():
    if shutil.which("apt"):
      return "apt"
    print("warning: /etc/debian_version exists but can't find `apt`. Trying others")

  if sys.platform.startswith("freebsd"):
    if shutil.which("pkg"):
      return "pkg"
    print("warning: sys.platform looks like `freebsd` but can't find `pkg`. Trying others")

  raise Exception("ruh roh, no package manager matches the current system")


def pkg_list_updates():
  pass


APT_INST_RE = re.compile(r'Inst (?P<name>\S+) \[(?P<cur>\S+)\] \((?P<new>\S+) (?P<repo>.*)\)')
def apt_list_updates():
  cmd = ["apt-get", "-s", "upgrade"]
  stdout = subprocess.check_output(cmd, text=True)
  directives = (l for l in stdout.splitlines() if l.startswith("Inst"))
  repo_updates = {}
  for line in directives:
    if m := APT_INST_RE.match(line):
      name, version_from, version_to, repo = m.groups()
      repo_updates.setdefault(repo, {})[name] = version_from, version_to
    else:
      print("unmatched line:", line)

  print_repo_names = len(repo_updates) > 1
  maxlen = max(len(name) for updates in repo_updates.values() for name in updates)
  for repo, updates in repo_updates.items():
    if print_repo_names:
      print(f"{repo}:")
    for name, (version_from, version_to) in updates.items():
      # maybe trim the version string?
      print(f"  {name:{maxlen}}", version_from, "=>", version_to)


PKG_MANAGERS = dict(
  apt=apt_list_updates,
  pkg=pkg_list_updates,
)


def main(prog, argv):
  package_manager = detect_package_manager()
  func = PKG_MANAGERS.get(package_manager, None)
  if func is None:
    print("unknown package manager:", package_manager)
  func()

if __name__ == "__main__":
  prog, *argv = sys.argv
  sys.exit(main(prog, argv))
