#!/bin/sh

. ~/.shells/paths


### Set $EDITOR to be whatever vim we find. We might override it later
# FIXME: Just loop over the possible paths and set EDITOR once, accordingly
if [ -z "$EDITOR" ]; then
  case ${uname_s} in
    MINGW*|MSYS*)
      # special case, as it might not be tagged as executable, for some reason
      if [ -f /c/Windows/vim.bat > /dev/null 2>&1 ]; then
        export EDITOR=vim.bat
      fi
      # test: not doing this and relying on git-for-windows' vim
      # if win32-vim is installed, use that as an EDITOR, msys vim is just weird
      # if type vim.bat >/dev/null 2>/dev/null; then
      #   export EDITOR="winpty vim.bat"
      #   alias vim="winpty vim.bat"
      #   alias vimdiff="vim -d"
      # fi
      ;;
    Darwin)
      # Have we brewed a vim?
      if [ -f ~/dev/brew/bin/vim -a -x ~/dev/brew/bin/vim ]; then
        export EDITOR=~/dev/brew/bin/vim
      fi
      ;;
    *)
      if hash vim > /dev/null 2>&1; then
        export EDITOR=vim
      fi
      ;;
  esac
fi


### OS defaults
case ${uname_s} in
  Darwin)
    alias ldd='otool -L'

    ## Homebrew settings
    # Always build from source
    export HOMEBREW_BUILD_FROM_SOURCE=1
    # No analytics
    export HOMEBREW_NO_ANALYTICS=1

    ## Disable the creepy, unacceptable, stats requests by CocoaPods
    export COCOAPODS_DISABLE_STATS=1
    ;;

  MINGW*|MSYS*)
    # Use native symlinks on Windows by default. Assumes we have perms for
    # that, which needs to be done once per machine
    export MSYS="winsymlinks:nativestrict enable_pcon"
    ;;
esac

## multi-os defaults
case ${uname_s} in
  Darwin|FreeBSD)
    # Colorize 'ls' command output
    export CLICOLOR=1
    alias ls='ls -FG'
    ;;
  linux|Linux|MINGW*|MSYS*)
    alias ls="ls -F --color"

    # Alias gvim on both, as WSL opening a Windows gvim makes sense
    if type gvim.bat >/dev/null 2>/dev/null; then
      alias gvim="gvim.bat"
      alias gvimdiff="gvim -d"
    fi
    ;;
esac

case $(uname -r) in
  *[Mm]icrosoft*)
    # find where C: is mounted. This can be changed in wsl.conf
    mount_c=$(findmnt C:\\ -o target -n)
    # WSL only, not used in MINGW, as that'll be git-bash already
    alias git-bash="\"/${mount_c}c/Program Files/Git/bin/bash.exe\" --login -i"
    # don't use colors for ninja on Windows, as between mingw and Windows
    # console defaults, we might lose the colors and get mangled characters
    export NINJA_STATUS="%e [%u/%r/%f] "
    ;;
  *)
    ### Ninja status: "time [left/running/finished]"
    # define this as default so we don't repeat it in the mingw/msys and the -z TERM branches below
    export NINJA_STATUS="%e [%u/%r/%f] "
    case ${uname_s} in
      MINGW*|MSYS*)
        # don't use colors for ninja on Windows, as between mingw and Windows
        # console defaults, we might lose the colors and get mangled characters
        ;;
      *)
        if [ ! -z "$TERM" ] && command -v tput >/dev/null 2>&1; then
          export NINJA_STATUS="$(tput bold)%e$(tput sgr0) [$(tput bold)$(tput setaf 1)%u$(tput sgr0)/$(tput bold)$(tput setaf 3)%r$(tput sgr0)/$(tput bold)$(tput setaf 2)%f$(tput sgr0)] "
        fi
        ;;
    esac
    ;;
esac

### aliases
alias less='less -r'
alias grep='grep --color=auto'

## Git
# gg alias plus v alias to do the previous line with vgg (script in
# ~/.shells/bin), which opens the output of git grep in vim, as a location
# list.
alias gg='git grep'
alias v='eval "v$(fc -l -n -1)"'


### Set better defaults for miscellaneous environment variables
## use vimpager if available
if hash vimpager 2>/dev/null;
then
  export PAGER=vimpager
else
  export PAGER="less --RAW-CONTROL-CHARS --quit-if-one-screen"
fi
# do smart-case searching (if there's no uppercase letters, it's
# case-insensitive) by default
# maybe try out:
# --quit-at-eof (quits the second time it reaches EOF)
# --status-column (eh... maybe not?)
export LESS="--ignore-case"
# TODO: Eventually setup some LESSOPEN/LESSCLOSE env vars to help with viewing files?

## cmake
# So ctest shows us the output if a test failed
export CTEST_OUTPUT_ON_FAILURE=On
export CMAKE_EXPORT_COMPILE_COMMANDS=On

## color for manpages:
export LESS_TERMCAP_mb=$'\e[01;31m'
export LESS_TERMCAP_md=$'\e[01;31m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;44;33m'
export LESS_TERMCAP_us=$'\e[01;32m'
# use a reset code as the last definition
export LESS_TERMCAP_ue=$'\e[0m'

### Load ssh-agent settings or start it and export its settings
maybe_start_ssh_agent() {
  case "$(which ssh-agent)" in
    /c/WINDOWS/System32/*)
      return
      ;;
  esac

  # Bail out if we're using ssh-agent forwarding
  if [ ! -z "${SSH_CONNECTION}" -a -S "${SSH_AUTH_SOCK}" ]; then
    # Don't print anything if we're under tmux (we've probably already
    # reported)
    if [ -z "$TMUX" -o \( ! -S "$(echo $TMUX | cut -d, -f 1)" \) ]; then
      echo detected SSH_AUTH_SOCK from forwarded agent
    fi
    return
  fi

  # Avoid clashing between MINGW and Linux on the same machine, otherwise we
  # end up with several ssh-agents running because the environments can't
  # interoperate
  local uname_s="$(uname -s)"
  local env="$HOME/.ssh/agent.env.${uname_s}"

  agent_load_env () { test -f "$env" && . "$env" >| /dev/null ; }

  agent_start () {
      echo Starting a new ssh-agent
      (umask 077; ssh-agent >| "$env")
      . "$env" >| /dev/null ;
  }

  agent_load_env

  # agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running
  agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)

  if [ ! "$SSH_AUTH_SOCK" -o "$agent_run_state" = 2 ]; then
      agent_start
  fi

  if [ ! "$SSH_AUTH_SOCK" -o "$agent_run_state" = 2 -o "$agent_run_state" = 1 ]; then
      [ "${uname_s}" = "Darwin" ] && ssh-add --apple-load-keychain
      ssh-add
  fi

  # Set the variables in Windows, hopefully getting us a (git-bash) git.exe
  # call that always chats to the agent
  if type -p setx.exe >/dev/null; then
    case $(uname -r) in
      *[Mm]icrosoft*)
        # don't want to run this on WSL as the socket won't be accessible for sure
        ;;
      *)
        # run these background commands in a subshell so bash doesn't report that they're done just before our prompt shows
        (
          # double-slash due to mingw interpretation, also throw them in the background
          setx SSH_AUTH_SOCK "${SSH_AUTH_SOCK}" >/dev/null &
          setx SSH_AGENT_PID "${SSH_AGENT_PID}" >/dev/null &
        )
        ;;
    esac
  fi
}
maybe_start_ssh_agent


### Tell ripgrep and bat (and 'batcat') where their configuration files are (there's no default set path for ripgrep, and the bat one is weird on windows)
# always set this, as an inner shell might have rg/bat/batcat
export RIPGREP_CONFIG_PATH=~/.config/ripgreprc
export BAT_CONFIG_PATH=~/.config/batrc

# tell cargo to use the sparse registry, which should improve registry update times by a lot
export CARGO_UNSTABLE_SPARSE_REGISTRY=true

if hash rg > /dev/null 2>&1; then
  ### Use rg as the default fzf content provider
  export FZF_DEFAULT_COMMAND='rg --files'
fi

if hash fzf > /dev/null 2>&1; then
  # use a dracula theme on fzf
  export FZF_DEFAULT_OPTS='--color=fg:#f8f8f2,bg:#282a36,hl:#bd93f9 --color=fg+:#f8f8f2,bg+:#44475a,hl+:#bd93f9 --color=info:#ffb86c,prompt:#50fa7b,pointer:#ff79c6 --color=marker:#ff79c6,spinner:#ffb86c,header:#6272a4'
fi

if hash eza > /dev/null 2>&1; then
  alias ls='eza --classify --icons'
  # omit --git on `ll`/`lt` as it's a bit heavier
  alias ll='eza --classify --icons --long --group --smart-group --group-directories-first'
  alias llg='ll --git'
  alias lt='eza --classify --icons --long --group --smart-group --group-directories-first --tree'
  alias ltg='lt --git'
  alias tree='eza --classify --icons --group-directories-first --tree'
  alias treeg='tree --git'
  # ------------------------------
  # exa - Color Scheme Definitions for Dracula
  # from https://github.com/dracula/exa/blob/main/exa_colors.zshrc
  # ------------------------------
  export EXA_COLORS="\
  uu=36:\
  gu=37:\
  sn=32:\
  sb=32:\
  da=34:\
  ur=34:\
  uw=35:\
  ux=36:\
  ue=36:\
  gr=34:\
  gw=35:\
  gx=36:\
  tr=34:\
  tw=35:\
  tx=36:"
fi


### set the locale to be a decent default if it's unset or is set to C
if [ -z "$LC_ALL" -o "$LC_ALL" = "C" ]; then

  export LANG='en_US.UTF-8'
  export LC_ALL="$LANG"
fi
