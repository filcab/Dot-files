#!/bin/sh

. ~/.shells/paths


### Set $EDITOR to be whatever vim we find. We might override it later
# FIXME: Just loop over the possible paths and set EDITOR once, accordingly
if [ -z "$EDITOR" ] && hash vim > /dev/null 2>&1; then
  export EDITOR=vim
fi


### OS defaults
case ${uname_s} in
  Darwin)
    alias ldd='otool -L'

    # Have we brewed a vim?
    if [ -f ~/dev/brew/bin/vim -a -x ~/dev/brew/bin/vim ]; then
      export EDITOR=~/dev/brew/bin/vim
    fi

    ## Homebrew settings
    # Always build from source
    export HOMEBREW_BUILD_FROM_SOURCE=1
    # No analytics
    export HOMEBREW_NO_ANALYTICS=1

    ## Disable the creepy, unacceptable, stats requests by CocoaPods
    export COCOAPODS_DISABLE_STATS=1
    ;;

  MINGW*)
    # Use native symlinks on Windows by default. Assumes we have perms for
    # that, which needs to be done once per machine
    export MSYS="winsymlinks:nativestrict enable_pcon"
    # test: not doing this and relying on git-for-windows' vim
    # if win32-vim is installed, use that as an EDITOR, msys vim is just weird
    # if type vim.bat >/dev/null 2>/dev/null; then
    #   export EDITOR="winpty vim.bat"
    #   alias vim="winpty vim.bat"
    #   alias vimdiff="vim -d"
    # fi
    ;;
esac

## multi-os defaults
case ${uname_s} in
  Darwin|FreeBSD)
    # Colorize 'ls' command output
    export CLICOLOR=1
    alias ls='ls -FG'
    ;;
  linux|Linux|MINGW*)
    alias ls="ls -F --color"

    # Alias gvim on both, as WSL opening a Windows gvim makes sense
    if type gvim.bat >/dev/null 2>/dev/null; then
      alias gvim="gvim.bat"
      alias gvimdiff="gvim -d"
    fi
    ;;
esac

case $(uname -r) in
  *[Mm]icrosoft*)
    # find where C: is mounted. This can be changed in wsl.conf
    mount_c=$(findmnt C:\\ -o target -n)
    # WSL only, not used in MINGW, as that'll be git-bash already
    alias git-bash="\"/${mount_c}c/Program Files/Git/bin/bash.exe\" --login -i"
    ;;
esac

### aliases
alias less='less -r'
alias grep='grep --color=auto'

## Git
# gg alias plus v alias to do the previous line with vgg (script in
# ~/.shells/bin), which opens the output of git grep in vim, as a location
# list.
alias gg='git grep'
alias v='eval "v$(fc -l -n -1)"'


### Set better defaults for miscellaneous environment variables
## use vimpager if available
if hash vimpager 2>/dev/null;
then
  export PAGER=vimpager
else
  export PAGER="less -R"
fi

## cmake
# So ctest shows us the output if a test failed
export CTEST_OUTPUT_ON_FAILURE=1

## color for manpages:
export LESS_TERMCAP_mb=$'\e[01;31m'
export LESS_TERMCAP_md=$'\e[01;31m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;44;33m'
export LESS_TERMCAP_us=$'\e[01;32m'
# use a reset code as the last definition
export LESS_TERMCAP_ue=$'\e[0m'

### Load ssh-agent settings or start it and export its settings
maybe_start_ssh_agent() {
  # Bail out if we're using ssh-agent forwarding
  if [ ! -z "${SSH_CONNECTION}" -a -S "${SSH_AUTH_SOCK}" ]; then
    # Don't print anything if we're under tmux (we've probably already
    # reported)
    if [ -z "$TMUX" -o \( ! -S "$(echo $TMUX | cut -d, -f 1)" \) ]; then
      echo detected SSH_AUTH_SOCK from forwarded agent
    fi
    return
  fi

  # Avoid clashing between MINGW and Linux on the same machine, otherwise we
  # end up with several ssh-agents running because the environments can't
  # interoperate
  local uname_s="$(uname -s)"
  local env="$HOME/.ssh/agent.env.${uname_s}"

  agent_load_env () { test -f "$env" && . "$env" >| /dev/null ; }

  agent_start () {
      echo Starting a new ssh-agent
      (umask 077; ssh-agent >| "$env")
      . "$env" >| /dev/null ;
  }

  agent_load_env

  # agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running
  agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)

  if [ ! "$SSH_AUTH_SOCK" -o "$agent_run_state" = 2 ]; then
      agent_start
  fi

  if [ ! "$SSH_AUTH_SOCK" -o "$agent_run_state" = 2 -o "$agent_run_state" = 1 ]; then
      [ "${uname_s}" = "Darwin" ] && ssh-add --apple-load-keychain
      ssh-add
  fi

  # Set the variables in Windows, hopefully getting us a (git-bash) git.exe
  # call that always chats to the agent
  if type -p setx.exe >/dev/null; then
    case $(uname -r) in
      *[Mm]icrosoft*)
        # don't want to run this on WSL as the socket won't be accessible for sure
        ;;
      *)
        # run these background commands in a subshell so bash doesn't report that they're done just before our prompt shows
        (
          # double-slash due to mingw interpretation, also throw them in the background
          setx SSH_AUTH_SOCK "${SSH_AUTH_SOCK}" >/dev/null &
          setx SSH_AGENT_PID "${SSH_AGENT_PID}" >/dev/null &
        )
        ;;
    esac
  fi
}
maybe_start_ssh_agent


### Ninja status: "time [left/running/finished]"
export NINJA_STATUS="$(tput bold)%e$(tput sgr0) [$(tput bold)$(tput setaf 1)%u$(tput sgr0)/$(tput bold)$(tput setaf 3)%r$(tput sgr0)/$(tput bold)$(tput setaf 2)%f$(tput sgr0)] "

### Tell ripgrep where its configuration file is (there's no default set path)
export RIPGREP_CONFIG_PATH=~/.config/ripgreprc
