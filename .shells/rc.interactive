#!/bin/sh

# this file should only contain commands/functions that are exclusively for interactive mode (i.e: make no sense in scripts, etc)
[[ $- != *i* ]] && return

### Set $EDITOR to be whatever vim we find. We might override it later
# FIXME: Just loop over the possible paths and set EDITOR once, accordingly
if [ -z "$EDITOR" ]; then
  case ${uname_s} in
    MINGW*|MSYS*)
      # special case, as it might not be tagged as executable, for some reason
      if [ -f /c/Windows/vim.bat > /dev/null 2>&1 ]; then
        export EDITOR=vim.bat
      fi
      # test: not doing this and relying on git-for-windows' vim
      # if win32-vim is installed, use that as an EDITOR, msys vim is just weird
      # if type vim.bat >/dev/null 2>/dev/null; then
      #   export EDITOR="winpty vim.bat"
      #   alias vim="winpty vim.bat"
      #   alias vimdiff="vim -d"
      # fi
      ;;
    Darwin)
      # Have we brewed a vim?
      if [ -f ~/dev/brew/bin/vim -a -x ~/dev/brew/bin/vim ]; then
        export EDITOR=~/dev/brew/bin/vim
      fi
      ;;
    *)
      if hash vim > /dev/null 2>&1; then
        export EDITOR=vim
      fi
      ;;
  esac
fi

## multi-os defaults
case ${uname_s} in
  Darwin|FreeBSD)
    # Colorize 'ls' command output
    export CLICOLOR=1
    alias ls='ls -FG'
    ;;
  linux|Linux|MINGW*|MSYS*)
    alias ls="ls -F --color"

    # Alias gvim on both, as WSL opening a Windows gvim makes sense
    if type gvim.bat >/dev/null 2>/dev/null; then
      alias gvim="gvim.bat"
      alias gvimdiff="gvim -d"
    fi
    ;;
esac

case $(uname -r) in
  *[Mm]icrosoft*)
    # find where C: is mounted. This can be changed in wsl.conf
    mount_c=$(findmnt C:\\ -o target -n)
    # WSL only, not used in MINGW, as that'll be git-bash already
    alias git-bash="\"/${mount_c}c/Program Files/Git/bin/bash.exe\" --login -i"
    ;;
esac

### aliases
alias less='less -r'
alias grep='grep --color=auto'

## Git
# gg alias plus v alias to do the previous line with vgg (script in
# ~/.shells/bin), which opens the output of git grep in vim, as a location
# list.
alias gg='git grep'
alias v='eval "v$(fc -l -n -1)"'


### Set better defaults for miscellaneous environment variables
## use vimpager if available
if hash vimpager 2>/dev/null;
then
  export PAGER=vimpager
else
  export PAGER=less
fi

# do smart-case searching (if there's no uppercase letters, it's
# case-insensitive) by default
# maybe try out:
# --quit-at-eof (quits the second time it reaches EOF)
# --status-column (eh... maybe not?)
export LESS="--RAW-CONTROL-CHARS --quit-if-one-screen --no-init --ignore-case"
# TODO: Eventually setup some LESSOPEN/LESSCLOSE env vars to help with viewing files?

## color for manpages:
export LESS_TERMCAP_mb=$'\e[01;31m'
export LESS_TERMCAP_md=$'\e[01;31m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;44;33m'
export LESS_TERMCAP_us=$'\e[01;32m'
# use a reset code as the last definition
export LESS_TERMCAP_ue=$'\e[0m'

### Load ssh-agent settings or start it and export its settings
maybe_start_ssh_agent() {
  case "$(which ssh-agent)" in
    /c/WINDOWS/System32/ssh-agent|"/c/Program Files/OpenSSH/ssh-agent")
      # just assume we have no keys
      agent_run_state=1
      ;;
    *)
      # all others must guarantee we have an ssh-agent before calling ssh-add

    # Bail out if we're using ssh-agent forwarding
    if [ ! -z "${SSH_CONNECTION}" -a -S "${SSH_AUTH_SOCK}" ]; then
      # Don't print anything if we're under tmux (we've probably already
      # reported)
      if [ -z "$TMUX" -o \( ! -S "$(echo $TMUX | cut -d, -f 1)" \) ]; then
        echo detected SSH_AUTH_SOCK from forwarded agent
      fi
      return
    fi

    # Avoid clashing between MINGW and Linux on the same machine, otherwise we
    # end up with several ssh-agents running because the environments can't
    # interoperate
    local uname_s="$(uname -s)"
    local env="$HOME/.ssh/agent.env.${uname_s}"

    agent_load_env () { test -f "$env" && . "$env" >| /dev/null ; }

    agent_start () {
        echo Starting a new ssh-agent
        (umask 077; ssh-agent >| "$env")
        . "$env" >| /dev/null ;
    }

    agent_load_env

    # agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running
    agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)

    if [ ! "$SSH_AUTH_SOCK" -o "$agent_run_state" = 2 ]; then
        agent_start
    fi
  esac

  # agent should have started, let's add the keys
  if [ ! "$SSH_AUTH_SOCK" -o "$agent_run_state" = 2 -o "$agent_run_state" = 1 ]; then
      [ "${uname_s}" = "Darwin" ] && ssh-add --apple-load-keychain
      # add all private keys at bootup
      # probably should just AddKeysToAgent on a few/all hosts...
      ssh-add $(printf "%s\n" ~/.ssh/id_* | grep -v \\.pub)
  fi

  ### this is not useful nowadays, we're using the Windows ssh-agent as a service
  # # Set the variables in Windows, hopefully getting us a (git-bash) git.exe
  # # call that always chats to the agent
  # if type -p setx.exe >/dev/null; then
  #   case $(uname -r) in
  #     *[Mm]icrosoft*)
  #       # don't want to run this on WSL as the socket won't be accessible for sure
  #       ;;
  #     *)
  #       # run these background commands in a subshell so bash doesn't report that they're done just before our prompt shows
  #       (
  #         # double-slash due to mingw interpretation, also throw them in the background
  #         setx SSH_AUTH_SOCK "${SSH_AUTH_SOCK}" >/dev/null &
  #         setx SSH_AGENT_PID "${SSH_AGENT_PID}" >/dev/null &
  #       )
  #       ;;
  #   esac
  # fi
}
maybe_start_ssh_agent


if hash eza > /dev/null 2>&1; then
  alias ls='eza --classify --icons'
  # omit --git on `ll`/`lt` as it's a bit heavier
  alias ll='eza --classify --icons --long --group --smart-group --group-directories-first'
  alias llg='ll --git'
  alias lt='eza --classify --icons --long --group --smart-group --group-directories-first --tree'
  alias ltg='lt --git'
  alias tree='eza --classify --icons --group-directories-first --tree'
  alias treeg='tree --git'
fi

alias raddbg='start //b raddbg.exe'
