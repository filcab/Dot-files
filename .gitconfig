[alias]
	pretty = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	pretty2 = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(bold white)â€” %an%C(reset)' --abbrev-commit
	# "git pul" => git pull + git pretty with the updated revisions
	# save current HEAD (avoid logging later if we didn't update it)
	# git rev-parse @{1} trick is so we don't log if we don't have enough reflog (we need two entries for this head in the reflog for this head to be useful)
	# COUNT: revisions between the last state of this head to the current state
	# if they're too many to automatically print (maybe have a git config to set this?), we just emit a message with the revs we'd print
	# otherwise, do a git pretty between the last state of the current head and the current one
	pul = "!f() { : git pull; MAX_COUNT=100; OLD_HEAD=\"$(git rev-parse HEAD)\"; git pull \"$@\" && { [ \"${OLD_HEAD}\" = \"$(git rev-parse HEAD)\" ] && return 0; $(git rev-parse @{1} >/dev/null 2>/dev/null) || return 0; COUNT=$(git rev-list --no-merges --count @{1}..); if [ \"${COUNT}\" -gt ${MAX_COUNT} ]; then echo \"too many revisions between @{1} and HEAD (${COUNT}), not doing a git pretty --no-merges $(git rev-parse --short @{1})..$(git rev-parse --short HEAD)\"; else git pretty --no-merges @{1}..; fi; }; }; f"
	pushf = push --force-with-lease
	fpush = push --force-with-lease
	# Use the null command as a hint to git-completion.bash
	trymerge = "!f() { : git merge; git merge --no-commit \"$@\" || echo FAILED, please choose an earlier commit; echo Undoing changes; git merge --abort; }; f"
	uplog = log @{upstream}..
	fuplog = "!f() { : git fetch; git fetch \"$@\" && git uplog; }; f"

[commit]
	verbose = true
[core]
	autocrlf = false
	longpaths = true

[diff]
	algorithm = histogram
	# make stat lines have a few more characters for filenames at the expense
	# of dynamic range of the graph part
	statGraphWidth = 5
[merge]
	conflictstyle = diff3
	tool = vimdiff
[mergetool "fugitive"]
	# vim-fugitive mergetool from
	# https://vi.stackexchange.com/questions/3985/git-mergetool-vimdiff-command
	cmd = vim "+Gdiff" $MERGED

# Test diff-highlight, which should be a bit better than regular word highlight
[pager]
	log = diff-highlight | less -R
	show = diff-highlight | less -R
	diff = diff-highlight | less -R

[rebase]
	autoSquash = true
	autoStash = true
[pull]
	rebase = true
[push]
	default = simple
[user]
	name = Filipe Cabecinhas

# Some corporate firewalls don't let git:// protocols go through. Let's try
# assuming that we have an equivalent https:// access to any repos we need
[url "https://"]
	insteadOf = git://

# From: https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0
# for $deity's sake, check that anything we're getting is complete and sane on
# a regular basis
[transfer]
	fsckobjects = true
[fetch]
	fsckobjects = true
[receive]
	fsckObjects = true
[init]
	defaultBranch = main
[rerere]
	enabled = 1
