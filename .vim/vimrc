""""""""""""" Start of FilCab's stuff
let g:filcab_features = []

" reset to vim-defaults
if &compatible          " only if not set before:
  set nocompatible      " use vim-defaults instead of vi-defaults (easier, more user friendly)
endif

""""""""""""""""""""""""""""""""""""""""""
" From tpope's sensible.vim (last checked on 2017-11-15):
" https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim
" Changes are commented
" filcab: had if has('autocmd'), which is true even in tiny builds
filetype plugin indent on
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

set autoindent
set backspace=indent,eol,start
set clipboard=
set complete+=d
set incsearch
set smarttab

"set nrformats-=octal  "filcab: haven't yet had problems with this

" Always show the status bar
set laststatus=2
set ruler               " show cursor position in status bar

set scrolloff=2         " 2 lines above/below cursor when scrolling
set sidescrolloff=5
set display+=lastline

scriptencoding utf-8  " filcab: In sensible, this is conditional
set encoding=utf-8    " filcab: Not in sensible

"filcab: sensible.vim version:
" set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
"
" From silvas' vimrc:
" Use Knuth-y underspace for trailing space
" I once had a problem with › where it would show up wrong. Use ` instead
" (I've actually come to prefer it, since it is smaller).
set listchars=tab:`\ ,trail:⎕ ",eol:$
set list

set formatoptions+=j " Delete comment character when joining commented lines

" FIXME: huh?
if has('path_extra')
  set tags-=./tags tags-=./tags; tags^=./tags;
endif

" Automatically reload changed files
set autoread

set history=1000
set tabpagemax=50
" Don't save as much info nor options
set viminfo^=!
set sessionoptions-=options

" End of tpope's sensible.vim stuff
""""""""""""""""""""""""""""""""""""""""""

" Map <LocalLeader> to , by default (was '\', same as <Leader>)
let maplocalleader=','

" Dirs to search for programs used by plugins
let g:clang_tools_search_paths = ['~/dev/llvm/install/bin', '~/dev/llvm/build/bin', 'c:/code/llvm/install/bin', 'c:/code/llvm/build/bin', 'c:/code/llvm/build-ninja/bin',  'c:/code/llvm/build-vs/bin']
let g:binary_search_paths = ['~/dev/brew/bin', '~/dev/homebrew/bin']

" minimize + re-sort tools to put ripgrep near the top
" start with git assuming stuff works. I sometimes am on a git repo and want
" to search another one, so let's see if this is not an issue.
let g:grepper = get(g:, 'grepper', {})
let g:grepper.tools =
      \ ['rg', 'git', 'ack', 'ack-grep', 'grep', 'findstr']

" Try finding ripgrep to use with vim's grep functionality
if executable('rg')
  call extend(g:filcab_features, ["ripgrep"])
  " Assume ripgrep is in cargo directory (if available), and that's in PATH
  let &grepprg = "rg --vimgrep --smart-case"
elseif executable("/mnt/c/Users/gbcabecfi/.cargo/bin/rg.exe")
  call extend(g:filcab_features, ["ripgrep"])
  " special vimgrep case for WSL (won't be able to search WSL drives,
  " though...)
  let &grepprg = "/mnt/c/Users/gbcabecfi/.cargo/bin/rg.exe --vimgrep --smart-case"
elseif executable('ack')
  call extend(g:filcab_features, ["ack"])
  " Use ack if rg is not available
  let &grepprg = 'ack -H --nocolor --nogroup --column --smart-case'
" else leave it alone
endif

" Always use proper slashes on Windows if our shell looks like a *NIX one.
" Windows shell settings require special care so they always work on:
"   - Regular Windows (gvim.exe)
"   - With and without winpty:
"     - git-bash running installed (up-to-date) vim (same installation as previous gvim.exe)
"     - git-bash running an older vim.exe (distributed with it)
" 2021-11-09: Previously, I'd set the shell to cmd.exe on all Windows
" executions. Let's try just on win32, but not on win32unix
if has("win32") || has('win32unix') " only enter for stuff running on windows
  " 2021-11-09: When executing gvim from a git-for-windows shell, we end up
  " with &shell=='', as well as a Windows &shellcmdflag=='/c'
  if executable(&shell) != 1
    " Our 'shell' option is invalid. Possibly due to / vs \ and dirs with
    " spaces. Revert to the Windows default.
    set shell=C:\\WINDOWS\\system32\\cmd.exe
    set shellxquote=(
    set shellcmdflag=/c
    " Other shell options seem the same between Windows and git-bash vim
  endif
endif

"Auto-reload vimrc (with whatever path vim might have)
autocmd! BufWritePost $MYVIMRC source $MYVIMRC
" resolve any symlinks in $MYVIMRC
let $MYVIMRC = resolve($MYVIMRC)

"Auto-reload vimrc (with the resolved path)
autocmd! BufWritePost $MYVIMRC source $MYVIMRC

" Set $MYVIMRUNTIME from $MYVIMRC so we can use it in many other places
let $MYVIMRUNTIME = fnamemodify($MYVIMRC, ":p:h")
if has('win32unix')
  " we're on cygwin/mingw, so switch /X to X:
  let $MYVIMRUNTIME = substitute($MYVIMRUNTIME, '^/\(.\)\(.*\)$', '\1:\2', '')
endif

" Allow some common commands with the first letter(s) capitalized
command! -bang -nargs=? -complete=file E e<bang> <args>
command! -bang -nargs=? -complete=file W w<bang> <args>
command! -bang -nargs=? -complete=file Wq wq<bang> <args>
command! -bang -nargs=? -complete=file WQ wq<bang> <args>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Q q<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>

" Per FreeBSD's security advice
set nomodeline

" vim is the default editor for vim's subshells
let $EDITOR = "vim"

" Make %% in the command line expand to the directory of the current file
cabbr <expr> %% expand('%:p:h:gs?\\?/?')

" statusline:
"   close to the default one but with the following changes:
"   * no space between file and 'changed' marker
"   * shows decimal and hex value of current char
set statusline=%<%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P

" When in a git repo, tell us the current branch
" Only set it if we have fugitive available. Check with a variable it defines
let &statusline = '%{fugitive#statusline()} ' . &statusline

  " macOS' Terminal.app doesn't support 24-bit colours :-(
if !has('macunix') || has('gui_running')
  " Pretty sure most terminals I use support this. Not adding a has(...) check
  " as I want an error if I use any vim which doesn't support it.
  set termguicolors
  " Adjust the t_8[bf] options for {screen,tmux}-256color term (just use what
  " the vim help page for |xterm-color| says)
  if index(["screen-256color", "tmux-256color"], $TERM) != -1
    let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
    let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
  endif
endif


" From https://vimways.org/2018/the-power-of-diff/
" macOS Catalina's (801) and Big Sur's (802) vims don't have these yet. Figure
" out a better test
if v:version > 802
  " Use the patience diff algorithm, to usually get more readable diffs
  set diffopt+=algorithm:patience
  " Use indentation as a heuristic. Might be better as an on-demand thing?
  set diffopt+=indent-heuristic
endif

" Let's try not folding (especially useful with foldmethod=indent) if there's
" now enough lines for it to be worth it.
set foldminlines=5

""""""""""""" End of FilCab's stuff

" display settings
set nonumber            " do not show line numbers
set showmatch           " show matching bracket (briefly jump)
set showmode            " show mode in status bar (insert/replace/...)
set showcmd             " show typed command in status bar
set title               " show file in titlebar

if has('wildmenu')
  set wildignore+=*.a,*.o
  set wildignore+=*.pyc
  set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
  set wildignore+=.DS_Store,.git,.hg,.svn
  set wildignore+=*.swp,*.tmp
  set wildmenu          " completion with menu
  set wildmode=longest:full " complete longest match and show menu
  " Make filename completion case-insensitive
  set wildignorecase
endif

" Use popups instead of preview windows for completion, where available
if has('popupwin')
  set completeopt-=preview
  set completeopt+=popup
  set completepopup=border:off
endif

" editor settings
set esckeys             " map missed escape sequences (enables keypad keys)
set ignorecase          " case insensitive searching
set smartcase           " but become case sensitive if you type uppercase characters
set smartindent         " smart auto indenting
set magic               " change the way backslashes are used in search patterns
set backupdir=$MYVIMRUNTIME/backups     " Hide backups in the .vim directory
set directory=$MYVIMRUNTIME/swapfiles// " Hide swap files in the .vim directory
set viminfofile=$MYVIMRUNTIME/viminfo   " don't dump the viminfo file in $HOME

set tabstop=4           " number of spaces a tab counts for
set shiftwidth=2        " spaces for autoindents
set expandtab           " turn a tabs into spaces

" splitting settings
set splitbelow          " When splitting open the new file below or to the right
set splitright

" misc settings
set fileformats=unix,dos " only detect unix file format, displays that ^M with dos files

set viminfo+='20,<500   " remember copy registers after quitting in the .viminfo file -- 20 jump links, regs up to 500 lines'
set hidden              " remember undo after quitting

set mouse=v             " use mouse in visual mode (not normal,insert,command,help mode

let g:yankring_history_dir = $MYVIMRUNTIME


" color settings (if terminal/gui supports it)
if &t_Co > 2 || has('gui_running')
  set hlsearch             " highlight search (very useful!)
  set guioptions-=T        " Don't show toolbar
  " FIXME: this should be autodetected. Check our usual places, and remove if
  " it's acceptable
  "set background=dark

  " macOS' Terminal.app doesn't support 24-bit colours :-(
  if !has('macunix') || has('gui_running')
    " Let's try this one a bit
    " material schemes don't do it for me, as the contrast is not big enough:
    "   - background is too light
    "   - letters look dimmed a bit too much (might just need a change in
    "   background to fix)
    " Don't error if the colorscheme doesn't exist (most likely reason: we
    " didn't fetch the packages)
    silent! colorscheme aurora
  else
    " Don't error if the colorscheme doesn't exist (most likely reason: we
    " didn't fetch the packages)
    silent! colorscheme molokai
  endif

  if has('macunix') && has('gui_running') && has('vim_starting')
    set guifont=Monaco:h14
  endif

  if has('win32') && has('gui_running') && has('vim_starting')
    " FiraCode NerdFont: nice font, with added icons
    " Cascadia: Seems a bit nicer
    " Consolas: Good, default Windows fonts (after Win7)
    set guifont=FiraCode\ NF:h12,Cascadia\ Code:h13,Cascadia\ Mono:h13,Consolas:h13
    " Make the window larger by default. This should fit 3 side-by-side panes
    " very easily.
    set lines=80 columns=280
  endif
endif

" Always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside
" an event handler (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

" silvas:
" experimental. note that \%# is used to match the cursor position, so that
" we aren't marking red the area that we are just typing.
match Error /\s\+\%#\@!$/

packadd vim-matchup
if !get(g:, 'loaded_matchup', 0)
  " Load matchit.vim, but only if the user hasn't installed a newer version.
  if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
    runtime! macros/matchit.vim
  end
end
