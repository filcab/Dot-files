#!/usr/bin/env python

from pathlib import Path

import argparse
import os
import platform
import shutil
import subprocess
import sys

parser = argparse.ArgumentParser()
parser.add_argument("YCM_dir")
args = parser.parse_args(sys.argv[1:])
ycm_dir = args.YCM_dir if "YCM_dir" in args else "opt/YouCompleteMe"


if platform.system() == "Windows" and "VisualStudioVersion" not in os.environ:
    # json is only needed if we need to use vswhere
    import json

    print(
        "%VisualStudioVersion% is not defined. "
        "Re-executing script under MS dev tools for x64"
    )

    vswhere = (
        Path(os.environ["ProgramFiles(x86)"])
        / "Microsoft Visual Studio"
        / "Installer"
        / "vswhere.exe"
    )
    # For some reason, subprocess.run() doesn't like a Path object as the first element
    # of the sequence...
    proc = subprocess.run(
        [str(vswhere), "-latest", "-format", "json", "-utf8"],
        stdout=subprocess.PIPE,
        encoding="utf-8",
    )
    # We're asking for the latest, so expect a single result and use it
    props = json.loads(proc.stdout.strip())[0]
    cat = props["catalog"]
    print(
        f"Using {cat['productName']} {cat['productLineVersion']}"
        f"{cat['productDisplayVersion']}"
    )
    devcmd = Path(props["installationPath"]) / "Common7" / "Tools" / "vsdevcmd.bat"
    # Quoty McQuote Face, but assume file names aren't malicious
    cmd = (
        f"cmd /s /c "
        f'""{str(devcmd)}" -arch=x64 & "{sys.executable}" "{__file__}" "{ycm_dir}""'
    )
    # re-exec, with VS env vars
    sys.exit(subprocess.run(cmd).returncode)


basedir = Path(__file__).parent
os.chdir(basedir)
# We might be called on the bundle directory or on the YCM directory
if os.path.isdir(ycm_dir):
    os.chdir(ycm_dir)


if platform.system() == "Darwin":
    lib_suffixes = ["dylib"]
elif platform.system() == "Windows":
    lib_suffixes = ["lib"]
elif platform.system() in ["Linux", "FreeBSD"]:
    lib_suffixes = ["so", "so.1"]
else:
    print(
        f"Unknown platform: {platform.system()}. Please edit this script and add it.",
        file=sys.stderr,
    )
    sys.exit(1)


tentative_llvm_paths = list(
    map(Path.resolve, map(Path.expanduser,
        map(Path, [
            # common dev paths
            "~/dev/llvm/install",
            "~/dev/llvm/build",
            "~/work/llvm-cmake",
            "~/dev/brew/opt/llvm",
            "C:/code/llvm/install",
            "C:/code/llvm/build",
            # linux (debian, at least)
            "/usr/lib/llvm-11",
            "/usr/lib/llvm-12",
            "/usr/lib/llvm-13",
            "/usr/lib/llvm-14",
            "/usr/lib/llvm-15",
            # freebsd ports
            "/usr/local/llvm14",
            "/usr/local/llvm15",
        ])))
)

libclang_lib, lib_suffix = next(
    (x, lib_suffix)
    for d in tentative_llvm_paths
    for lib_suffix in lib_suffixes
    for x in d.glob(f"lib/lib*clang.{lib_suffix}")
)

# We'll actually get an exception if we didn't find it
assert libclang_lib

llvm_root = libclang_lib.parent.parent
print(f"LLVM root: {llvm_root}")


# We'll actually get an exception if we didn't find it
assert lib_suffix
print(f"Library file suffix: {lib_suffix}")


# Default to enabling clang, assuming the code above is ok
# FIXME: Improve the above detection, and fail gracefully + disable clang


class Completers(object):
    def __init__(self):
        self.enabled = []
        self.skipped = []

    def ok(self, completer):
        self.enabled.append(completer)

    def skip(self, completer):
        self.skipped.append(completer)

    def cli_args(self):
        return [f"--{c}-completer" for c in self.enabled]

    def warn_skipped(self, prefix="\n"):
        if not self.skipped:
            return

        print(f"{prefix}Skipped completers:")
        for c in self.skipped:
            print(f"  {c}")


completers = Completers()


def find_executable_enable_completer(exe, comp):
    if shutil.which(exe):
        completers.ok(comp)
    else:
        completers.skip(comp)


# We're now able to tell YCM where to find the language servers, so let's not enable any
# completer which we will install in another way (clangd, rls).
find_executable_enable_completer("node", "ts")


# Warn before building so users can cancel if they want
completers.warn_skipped()

env = os.environ.copy()
env["EXTRA_CMAKE_ARGS"] = f"-DEXTERNAL_LIBCLANG_PATH:FILEPATH={libclang_lib.as_posix()}"
# For some reason we need this on Windows
if platform.system() == "Windows":
    env["EXTRA_CMAKE_ARGS"] += f" -DPATH_TO_LLVM_ROOT:PATH={llvm_root.as_posix()}"


# , '--build-dir={}'.format(os.path.join(os.getcwd(), platform.system()))
cmd = [sys.executable, "install.py"] + completers.cli_args()
# ensure all stdout lines were printed before we exec
print(f"Executing: {' '.join(cmd)}", flush=True)
subprocess.check_call(cmd, env=env)

# Also warn at the end, as we might have a big backlog
completers.warn_skipped()
