#!/usr/bin/env python

from __future__ import print_function
import os
import platform
import string
import subprocess
import sys


if platform.system() == 'Windows' and 'VisualStudioVersion' not in os.environ:
    print('%VisualStudioVersion% is not defined. Did you source vcvarsall.bat or are running on the tools shell?')
    sys.exit(1)


# We might be called on the bundle directory or on the YCM directory
if os.path.isdir('YouCompleteMe'):
    os.chdir('YouCompleteMe')


tentative_llvm_paths = ['~/dev/llvm/build', '~/work/llvm-cmake', 'C:/code/llvm/install', 'C:/code/llvm/build']
for d in tentative_llvm_paths:
    d = os.path.realpath(os.path.expanduser(d))
    if os.path.isdir(d):
        llvm_root = d.translate(string.maketrans('\\', '/'))
        break
# We'll actually get an exception if we didn't find it
assert llvm_root
print('LLVM root: {}'.format(llvm_root))


if platform.system() == 'Darwin':
    lib_suffix = 'dylib'
elif platform.system() == 'Windows':
    lib_suffix = 'lib'
# We'll actually get an exception if we didn't find it
assert lib_suffix
print('Library file suffix: {}'.format(lib_suffix))


os.environ['EXTRA_CMAKE_ARGS'] = '-DEXTERNAL_LIBCLANG_PATH:FILEPATH={}/lib/libclang.{}'.format(llvm_root, lib_suffix)


# For some reason we need this on Windows
if platform.system() == 'Windows':
    os.environ['EXTRA_CMAKE_ARGS'] += ' -DPATH_TO_LLVM_ROOT:PATH={}'.format(llvm_root)


print('Calling install script')
subprocess.check_call(['python', 'install.py', '--clang-completer', '--rust-completer', '--ts-completer', '--ninja'], env=os.environ)
