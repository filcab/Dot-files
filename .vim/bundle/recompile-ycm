#!/usr/bin/env python3

from distutils.spawn import find_executable
import os
import platform
import string
import subprocess
import sys


if platform.system() == 'Windows' and 'VisualStudioVersion' not in os.environ:
    print('%VisualStudioVersion% is not defined. Did you source vcvarsall.bat or are running on the tools shell?')
    sys.exit(1)


# We might be called on the bundle directory or on the YCM directory
if os.path.isdir('YouCompleteMe'):
    os.chdir('YouCompleteMe')


def maketrans(*args):
    if sys.version_info[0] > 2:
        return str.maketrans(*args)
    return string.maketrans(*args)


tentative_llvm_paths = ['~/dev/llvm/install', '~/dev/llvm/build', '~/work/llvm-cmake', 'C:/code/llvm/install', 'C:/code/llvm/build']
for d in tentative_llvm_paths:
    d = os.path.realpath(os.path.expanduser(d))
    if os.path.isdir(d):
        llvm_root = d.translate(maketrans('\\', '/'))
        break
# We'll actually get an exception if we didn't find it
assert llvm_root
print('LLVM root: {}'.format(llvm_root))


if platform.system() == 'Darwin':
    lib_suffix = 'dylib'
elif platform.system() == 'Windows':
    lib_suffix = 'lib'
elif platform.system() == 'Linux':
    lib_suffix = 'so'
else:
    print('Unknown platform: {}. Please edit this script and add it.'.format(platform.system()), file=sys.stderr)
    sys.exit(1)
# We'll actually get an exception if we didn't find it
assert lib_suffix
print('Library file suffix: {}'.format(lib_suffix))


os.environ['EXTRA_CMAKE_ARGS'] = '-DEXTERNAL_LIBCLANG_PATH:FILEPATH={}/lib/libclang.{}'.format(llvm_root, lib_suffix)


# For some reason we need this on Windows
if platform.system() == 'Windows':
    os.environ['EXTRA_CMAKE_ARGS'] += ' -DPATH_TO_LLVM_ROOT:PATH={}'.format(llvm_root)


# Default to enabling clang, assuming the code above is ok
# FIXME: Improve the above detection, and fail gracefully + disable clang

class Completers(object):
    def __init__(self):
        self.enabled = ['clang']
        self.skipped = []

    def ok(self, completer):
        self.enabled.append(completer)

    def skip(self, completer):
        self.skipped.append(completer)

    def cli_args(self):
        return ['--{}-completer'.format(c) for c in self.enabled]

    def warn_skipped(self):
        if not self.skipped:
            return

        print('Skipped completers:')
        for c in self.skipped:
            print('  {}'.format(c))


completers = Completers()
def find_executable_enable_completer(exe, comp):
    if find_executable(exe):
        completers.ok(comp)
    else:
        completers.skip(comp)

# filcab: Remove clangd for now, as there's no option other than installing it
# with YCM's download...
#find_executable_enable_completer('clangd', 'clangd')
# Same for rust-completer. Just edit it to search anywhere for rls
find_executable_enable_completer('rustc', 'rust')
find_executable_enable_completer('node', 'ts')


# Warn before building so users can cancel if they want
completers.warn_skipped()

# , '--build-dir={}'.format(os.path.join(os.getcwd(), platform.system()))
print('Executing: {}'.format(' '.join(['python3', 'install.py'] + completers.cli_args()), env=os.environ))
subprocess.check_call(['python3', 'install.py'] + completers.cli_args(), env=os.environ)

# Also warn at the end, as we might have a big backlog
completers.warn_skipped()

